import java.nio.charset.StandardCharsets

plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'checkstyle'
    id 'java'
}

allprojects {
    ext {
        springBootVer = "3.1.5"
        springFoxVer = "3.0.0"
        seleniumVer = "4.16.1"
        seleniumHttpJdkVer = "4.13.0"
        sauceRestVer = "2.0.2"
        webdriverManagerVer = "5.6.1"
        testngVer = "7.10.1"
        junitVer = "5.9.2"
        reportportalTestNgVer = "5.3.1"
        reportportalLogBackVer = "5.1.6"
        feignVer = "1.4.7.RELEASE"
        openFeignVer = "4.0.4"
        feignJacksonVer = "13.1"
        feignHttpClient5Ver = "13.0"
        lombokVer = '1.18.30'
        gsonVer = "2.10.1"
        assertjVer = "3.24.2"
        guavaVer = "32.1.3-jre"
        vavrVer = "0.10.4"
        httpclient5Ver = "5.2.1"
        openCsvVer = "5.8"
        ashotVer = "1.5.4"
        diffMatchPatchVer = "1.2"
        freemarkerVersion = "2.3.32"
        jschVersion = "0.1.55"
        rholderRetryingVer = "2.0.0"
        javaxVer = "2.0.1.Final"
        modelMapperVer = "3.2.0"
        apachcePoi = "5.2.4"
        cucumberVer = "7.14.0"
        cucumberSpringVer = "7.14.0"
        surefirePlugin = '3.0.0'
        selenideVersion = "7.0.3"
        allureSelenideVersion = "2.24.0"
        reportPortalLoggerVer = "5.1.4"
        restAssuredVer="5.3.2"
        httpclient5Ver="5.2.1"
    }

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'checkstyle'
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url "https://packages.atlassian.com/maven/repository/public"
        }
    }

    checkstyle {
        toolVersion = '10.9.1'
        configFile = rootProject.file('checkstyle/checkstyle.xml')
        showViolations = true
        ignoreFailures = false
    }

    group 'com.reportportal'
    version '1.0-SNAPSHOT'
    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVer}"
        implementation "org.springframework.boot:spring-boot-starter-web:${springBootVer}"
        implementation "org.springframework.boot:spring-boot-starter-aop:${springBootVer}"
        implementation "io.vavr:vavr:${vavrVer}"
        implementation "com.github.rholder:guava-retrying:${rholderRetryingVer}"
        implementation "com.github.rholder:guava-retrying:${rholderRetryingVer}"
        implementation "org.modelmapper:modelmapper:${modelMapperVer}"
        implementation "org.seleniumhq.selenium:selenium-http-jdk-client:${seleniumHttpJdkVer}"
        implementation "org.seleniumhq.selenium:selenium-remote-driver:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-safari-driver:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-ie-driver:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-support:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-api:${seleniumVer}"
        implementation "org.seleniumhq.selenium:selenium-support:${seleniumVer}"
        implementation "io.qameta.allure:allure-selenide:${allureSelenideVersion}"
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVer}"
        testImplementation "io.cucumber:cucumber-java:${cucumberVer}"
        testImplementation "io.cucumber:cucumber-testng:${cucumberVer}"
        implementation "io.cucumber:cucumber-spring:${cucumberSpringVer}"
        compileOnly "org.projectlombok:lombok:${lombokVer}"
        compileOnly "org.apache.maven.plugins:maven-surefire-plugin:${surefirePlugin}"
        annotationProcessor "org.projectlombok:lombok:${lombokVer}"
        testCompileOnly "org.projectlombok:lombok:${lombokVer}"
        testImplementation "com.epam.reportportal:logger-java-selenide:${reportPortalLoggerVer}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVer}"
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}"
        implementation "io.rest-assured:rest-assured:${restAssuredVer}"
        implementation "io.rest-assured:xml-path:${restAssuredVer}"
        implementation "org.apache.httpcomponents.client5:httpclient5:${httpclient5Ver}"
    }

    task checkstyle(type: Checkstyle) {
        source = 'src'
        classpath = files()
        reports {
            xml.required = true
            html.required = true
            html.stylesheet resources.text.fromFile(rootProject.file('checkstyle/customCheckstyle.xsl'))
        }
    }

    tasks.withType(JavaCompile).configureEach { task ->
        if (Boolean.valueOf(System.getProperty("checkstyle.apply", "true"))) {
            dependsOn('checkstyle')
        }
        task.options.encoding(StandardCharsets.UTF_8.name())
        task.options.release.set(17)
    }

    jar {
        enabled = true
    }

    bootJar {
        enabled = false
    }
}

project(':tests-module') {
    //TestNG configuration
    tasks.named('test') {
        systemProperties System.getProperties()
        maxParallelForks = Runtime.getRuntime().availableProcessors()
        maxHeapSize = '1G'
        useTestNG() {
            //listeners << 'com.reportportal.core.test_ng.SeleniumScreenShotOnFailListener'
            listeners << 'com.reportportal.core.test_ng.SelenideScreenShotOnFailListener'
            options {
                setParallel("classes")
                setThreadCount(5)
            }
        }
    }

    //TestNG cucumber parallel configuration
//    tasks.named('test') {
//        useTestNG() {
//            suiteXmlFiles = files('/src/test/resources/testng.xml').toList()
//        }
//    }
}
